{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Contact/Contact.module.css","components/Filter/Filter.module.css","components/Container/Container.module.css","components/Section/Section.module.css","components/ContactList/ContactList.module.css","components/Container/Container.jsx","components/Section/Section.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","App.js","index.js"],"names":["module","exports","Container","children","className","s","container","Section","section","INITIAL_STATE","name","number","ContactForm","state","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","addContact","reset","this","onSubmit","form","autoComplete","label","type","pattern","title","required","onChange","input","btn","Component","Filter","filterValue","handleFilter","Contact","onDeleteContact","contactItem","contact","onClick","ContactList","deleteContact","filteredContacts","contactList","map","id","App","contacts","filter","uuidv4","normalizedName","toLowerCase","some","alert","prevState","showFilteredContacts","normalizedFilter","includes","localStorage","getItem","parsedContacts","JSON","parse","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a7fe0ae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3rg-J\",\"label\":\"ContactForm_label__XKMIG\",\"input\":\"ContactForm_input__19m3O\",\"btn\":\"ContactForm_btn__1eV-a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactItem\":\"Contact_contactItem__jUG-v\",\"contact\":\"Contact_contact__3EUjH\",\"btn\":\"Contact_btn__mwfzH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__17OSu\",\"input\":\"Filter_input__1RY75\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3zM2B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__1lXat\",\"title\":\"Section_title__1c4Pz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__3wMbK\"};","import PropTypes from 'prop-types';\r\nimport s from './Container.module.css';\r\n\r\nfunction Container({ children }) {\r\n  return (\r\n    <div className={s.container}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default Container;","import PropTypes from 'prop-types';\r\nimport s from './Section.module.css';\r\n\r\nfunction Section({ children }) {\r\n  return (\r\n    <section className={s.section}>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default Section;","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactForm.module.css';\r\n// Выносим объект с примитивами в константу, чтобы было удобно сбрасывать.\r\n// Нельзя использовать, если в каком-то свойстве состояния хранится сложный тип.\r\nconst INITIAL_STATE = {\r\n  name: '',\r\n  number: '',\r\n};\r\n\r\nclass ContactForm extends Component {\r\n  // в форме стейт нужен только при сабмите, поэтому храним\r\n  // его в компоненте формы, а при сабмите - отдаем наружу\r\n  state = {\r\n    ...INITIAL_STATE,\r\n  };\r\n  // Для всех инпутов создаем один обработчик\r\n  // \"паттерн ввод данных\" ->\r\n  handleChange = e => {\r\n    // подходит для инпутов, у которых есть name and value, \r\n    // для радиокнопок, но не чекбоксов\r\n    const { name, value } = e.currentTarget;\r\n    // Различать инпуты будем по атрибуту \"name\",\r\n    // применяя вычисляемые свойства объекта\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    // у обьекта this (а это наш class ContactForm) проп, который \r\n    // передается при вызове в App - функция addContact. передаем \r\n    // ей текущее состояние state при Submitе формы\r\n    this.props.addContact({ ...this.state });\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ ...INITIAL_STATE });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    \r\n    return (\r\n      <form\r\n        onSubmit={this.handleSubmit} \r\n        className={s.form} \r\n        autoComplete=\"off\">\r\n        \r\n        <label className={s.label}>\r\n          Name\r\n          <input\r\n            name=\"name\"\r\n            type=\"text\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n                value={name}\r\n                onChange={this.handleChange}\r\n                className={s.input}\r\n          />\r\n        </label>\r\n\r\n        <label className={s.label}>\r\n          Number\r\n          <input\r\n            name=\"number\"\r\n            type=\"tel\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n                value={number}\r\n                onChange={this.handleChange}\r\n                className={s.input}\r\n          />\r\n        </label>        \r\n\r\n        <button type=\"submit\" className={s.btn}>Add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n};\r\n\r\nexport default ContactForm;\r\n\r\nContactForm.propTypes = {\r\n  addContact: PropTypes.func.isRequired,\r\n}\r\n// Проблема обновления состояния - всегда должно быть новое после рендера,  \r\n// а не мутировать по ссылке старое.\r\n// Проверка на имутабеольность (равны ли эти значения между рендерами) ->\r\n// componentDidUpdate(prevProps, prevState) {\r\n//   console.log(prevState.name === this.state.name);\r\n// }","import PropTypes from 'prop-types';\r\nimport s from './Filter.module.css';\r\n\r\nfunction Filter({ filterValue, handleFilter }) {\r\n  return (\r\n    <label className={s.label}>\r\n      Find contacts by name / number\r\n      <input\r\n        type=\"text\"\r\n        value={filterValue}\r\n        onChange={handleFilter}\r\n        className={s.input}>\r\n      </input>\r\n    </label>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  filterValue: PropTypes.string.isRequired,\r\n  handleFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;","import PropTypes from 'prop-types';\r\nimport s from './Contact.module.css';\r\n\r\nfunction Contact({ onDeleteContact, name, number }) { \r\n  return (\r\n    <li className={s.contactItem}>\r\n      <p className={s.contact}>• {name}: {number}</p>\r\n      <button className={s.btn} onClick={onDeleteContact}>\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContact.propTypes = {\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Contact;","import PropTypes from 'prop-types';\r\nimport s from './ContactList.module.css';\r\nimport Contact from '../Contact';\r\n\r\nfunction ContactList({ deleteContact, filteredContacts }) {\r\n  return (\r\n    <ul className={s.contactList}>\r\n      {filteredContacts.map(({ id, name, number }) => {\r\n        return (\r\n          <Contact\r\n            key={id}\r\n            onDeleteContact={() => deleteContact(id)}\r\n            id={id}\r\n            name={name}\r\n            number={number}>\r\n          </Contact>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  deleteContact: PropTypes.func.isRequired,\r\n  filteredContacts: PropTypes.arrayOf(\r\n    PropTypes.shape()).isRequired,\r\n};\r\n\r\nexport default ContactList;","import { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport './App.css';\nimport Container from './components/Container';\nimport Section from './components/Section';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n\n    if (parsedContacts) {\n      this.setState({\n        contacts: parsedContacts\n      })\n    }\n  };\n\n  componentDidUpdate(prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  //===== Метод добавления нового контакта =====\n  addContact = ({ name, number }) => {\n    const { contacts } = this.state;\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n    // Проверка на повторный ввод существующего контакта\n    const normalizedName = name.toLowerCase();\n    contacts.some(contact =>\n      contact.name.toLowerCase() === normalizedName)\n      ?\n        alert(`${name} is already in contacts.`)\n      : \n        this.setState(prevState => ({\n          contacts: [contact, ...prevState.contacts],\n        }));\n        // this.setState(prevState => {\n          //   return(\n          //     { contacts: [...prevState.contacts, contact] }\n          //   )\n          // })  \n  }\n\n  //===== Метод удаления контакта =====\n  deleteContact = id => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== id),\n    }));\n    //  return (\n    //     { contacts: prevState.contacts.filter(item => item.id !== id) }\n    //   );\n    // })\n  };\n\n  handleFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n  //===== Метод фильтра\n  showFilteredContacts = () => {\n    const { contacts, filter } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter) ||\n      contact.number.includes(filter),\n    );\n  };\n\n  render() {\n    const { filter } = this.state;\n    const { addContact, handleFilter, deleteContact, showFilteredContacts } = this;\n    return (\n      <Container>\n        <Section>\n          <h1>Phonebook</h1>\n          <ContactForm\n            addContact={addContact} />\n        </Section>\n        \n        <Section>\n          <h2>Contacts</h2>\n          <Filter\n            filterValue={filter}\n            handleFilter={handleFilter} />\n          <ContactList\n            filteredContacts={showFilteredContacts()}\n            deleteContact={deleteContact} />\n        </Section>\n      </Container>\n    );\n  }\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}